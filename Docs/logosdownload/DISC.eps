%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2480 550
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2480 550
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.12720203 0.61478454 0.23129049 sc
q
852.80396 227.63448 m
855.7121 241.9335 856.1828 255.16519 854.24963 267.34647 c
852.31647 279.52774 848.06354 290.1673 841.47394 299.2482 c
834.86761 308.31216 826.2608 315.47861 815.63684 320.69675 c
804.97919 325.91486 792.37164 328.52393 777.81409 328.52393 c
763.2229 328.52393 749.55627 325.91486 736.79742 320.69675 c
724.03857 315.47861 712.50684 308.31216 702.23584 299.2482 c
691.94806 290.1673 683.35809 279.52774 676.48279 267.34647 c
669.59064 255.16519 664.69891 241.9335 661.79071 227.63448 c
658.86578 213.31851 658.39508 200.08682 660.32825 187.92249 c
662.26141 175.74121 666.5144 165.10165 673.12073 156.02075 c
679.71033 146.93985 688.31708 139.77341 698.95789 134.55527 c
709.58185 129.35408 722.20624 126.72808 736.78064 126.72808 c
751.3382 126.72808 765.00476 129.35408 777.78046 134.55527 c
790.52252 139.77341 802.05426 146.93985 812.34204 156.02075 c
822.62982 165.10165 831.21979 175.74121 838.09515 187.92249 c
844.98724 200.08682 849.89581 213.31851 852.80396 227.63448 c
852.80396 227.63448 l
h
835.00208 140.07835 m
833.85901 140.07835 l
822.26001 124.61034 806.27362 111.56502 785.89972 100.9424 c
765.52588 90.319778 743.2525 85 719.09637 85 c
700.28589 85 683.35809 88.574753 668.3299 95.707329 c
653.30164 102.85684 641.03027 112.83566 631.54938 125.59297 c
622.05164 138.33333 615.63019 153.4117 612.25134 170.8111 c
608.88934 188.19356 609.29279 207.13469 613.46167 227.63448 c
617.63062 248.11732 624.92615 267.05844 635.36523 284.45786 c
645.82111 301.85727 658.46234 316.93561 673.33929 329.67599 c
688.1994 342.45023 705.07678 352.39517 723.9881 359.56161 c
742.88269 366.69418 762.9035 370.28589 784.00018 370.28589 c
803.55035 370.28589 820.66302 366.21982 835.30463 358.10461 c
849.96307 349.98941 861.91504 338.57053 871.22784 323.89877 c
872.37091 323.89877 l
905.117 485 l
950 485 l
870.08478 91.946213 l
825.20178 91.946213 l
835.00208 140.07835 l
h
W*
0 0 2480 550 rc
560 535 m
1000 535 l
1000 35 l
560 35 l
h
f
Q
q
995.04022 421.74484 m
996.80206 430.69354 1001.4619 438.46616 1008.9704 445.09674 c
1016.4623 451.69324 1024.7448 455 1033.7516 455 c
1042.7748 455 1049.7234 451.69324 1054.6138 445.09674 c
1059.5042 438.46616 1061.0685 430.69354 1059.2902 421.74484 c
1057.3636 412.02908 1052.7697 404.03488 1045.5247 397.83041 c
1038.2961 391.60892 1029.9644 388.48965 1020.5788 388.48965 c
1011.1933 388.48965 1004.0965 391.60892 999.32135 397.83041 c
994.54626 404.03488 993.11371 412.02908 995.04022 421.74484 c
995.04022 421.74484 l
h
984.0575 358.02991 m
1028.0049 358.02991 l
973.96393 85 l
930 85 l
984.0575 358.02991 l
h
W*
0 0 2480 550 rc
880 505 m
1110 505 l
1110 35 l
880 35 l
h
f
Q
q
1061.0808 161.83372 m
1067.5989 150.80998 1075.4207 142.09738 1084.5961 135.6627 c
1093.7382 129.19478 1106.3231 125.96912 1122.351 125.96912 c
1129.2034 125.96912 1136.3064 126.73396 1143.6936 128.24702 c
1151.0474 129.7601 1157.9498 132.23753 1164.3844 135.6627 c
1170.8022 139.07126 1176.2507 143.34442 1180.7465 148.44893 c
1185.2423 153.57007 1188.2006 159.73872 1189.688 166.95486 c
1191.1755 174.15439 1190.7577 180.04037 1188.468 184.59621 c
1186.1615 189.15202 1182.6686 193.02612 1178.0056 196.25179 c
1173.3259 199.47743 1167.7438 202.03801 1161.2925 203.93349 c
1154.8077 205.82898 1148.1058 207.54156 1141.1699 209.07126 c
1129.1365 211.71497 1117.7549 214.74109 1107.0083 218.16628 c
1096.2786 221.57483 1087.1866 226.03088 1079.7325 231.53444 c
1072.2953 237.03801 1066.897 244.13777 1063.5376 252.88361 c
1060.1782 261.59619 1059.9109 272.80286 1062.7354 286.45367 c
1065.3927 299.35629 1070.5906 310.72922 1078.3455 320.58908 c
1086.1002 330.46555 1095.4094 338.61282 1106.2729 345.08075 c
1117.1198 351.51544 1128.819 356.45367 1141.3538 359.86224 c
1153.8718 363.28741 1166.4233 365 1179.0083 365 c
1198.0613 365 1214.9248 361.19241 1229.5822 353.61044 c
1244.2229 346.01187 1254.351 333.69122 1260 316.63184 c
1217.766 292.14014 l
1214.0056 301.61758 1208.0557 309.31592 1199.9331 315.2019 c
1191.7771 321.07126 1181.0474 324.01425 1167.7103 324.01425 c
1161.61 324.01425 1155.259 323.24942 1148.6573 321.73633 c
1142.0557 320.20667 1135.9554 317.94537 1130.3733 314.90262 c
1124.7911 311.85986 1119.8774 307.98575 1115.6658 303.24704 c
1111.454 298.5083 1108.7131 293.08789 1107.4596 287.01901 c
1106.2897 281.33255 1107.1086 276.49405 1109.8998 272.5202 c
1112.7075 268.52969 1116.9526 265.02139 1122.6184 261.97861 c
1128.2842 258.93585 1134.9694 256.29218 1142.7075 254.01425 c
1150.429 251.73634 1158.5348 249.84085 1166.9917 248.32779 c
1178.3398 246.04988 1188.9861 243.10689 1198.9304 239.49881 c
1208.8579 235.90736 1217.1978 231.06888 1223.9666 225 c
1230.7186 218.93112 1235.4485 211.33253 1238.156 202.23753 c
1240.8635 193.12589 1240.8301 181.91924 1238.1058 168.65083 c
1234.9805 153.48694 1229.2646 140.58432 1220.975 129.95963 c
1212.6852 119.33492 1202.8077 110.68884 1191.3259 104.07126 c
1179.8607 97.420425 1167.4261 92.581947 1154.0389 89.555817 c
1140.6184 86.513062 1127.2479 85 1113.9109 85 c
1091.0306 85 1072.0111 88.52494 1056.8691 95.52494 c
1041.7271 102.54156 1029.4261 115.52731 1020 134.51544 c
1061.0808 161.83372 l
h
W*
0 0 2480 550 rc
970 415 m
1310 415 l
1310 35 l
970 35 l
h
f
Q
q
1340.8855 485 m
1386.3059 485 l
1336.6991 245.75517 l
1485.3324 364.2681 l
1550 364.2681 l
1392.9429 241.72069 l
1507.5236 95 l
1440.5416 95 l
1334.7931 236.54311 l
1305.4204 95 l
1260 95 l
1340.8855 485 l
h
W*
0 0 2480 550 rc
1210 535 m
1600 535 l
1600 45 l
1210 45 l
h
f
Q
q
1757.3207 291.5871 m
1750.0032 302.96069 1741.2563 311.20822 1731.08 316.32965 c
1720.8696 321.45111 1708.9916 324.01181 1695.4117 324.01181 c
1680.2664 324.01181 1666.3292 321.45111 1653.6003 316.32965 c
1640.8884 311.20822 1629.7761 304.10803 1620.3146 294.99585 c
1610.8359 285.88367 1602.8718 275.35809 1596.4904 263.41916 c
1590.0918 251.44695 1585.4802 238.64333 1582.6042 224.99168 c
1579.7454 211.32341 1579.3029 198.53644 1581.2599 186.58086 c
1583.2169 174.62527 1587.2329 164.09972 1593.274 154.98753 c
1599.3152 145.89198 1607.4325 138.77516 1617.6259 133.63708 c
1627.8021 128.53227 1639.9014 125.97156 1653.8726 125.97156 c
1683.772 125.97156 1709.1788 136.97934 1730.11 158.97827 c
1757.3207 127.68424 l
1741.0011 112.86864 1723.201 102.06039 1703.9204 95.226257 c
1684.6228 88.408752 1665.087 85 1645.2789 85 c
1624.3136 85 1605.7988 88.408752 1589.7686 95.226257 c
1573.7212 102.06039 1560.9072 111.73793 1551.2925 124.25887 c
1541.6947 136.7798 1535.2792 151.57878 1532.0629 168.63918 c
1528.8467 185.73282 1529.3912 204.50591 1533.6965 224.99168 c
1537.8999 245.09502 1545.2003 263.68518 1555.5808 280.76221 c
1565.9443 297.83923 1578.6562 312.63821 1593.7166 325.15915 c
1608.7769 337.68008 1625.6749 347.44077 1644.428 354.47443 c
1663.1641 361.49149 1683.0403 365 1704.0055 365 c
1724.188 365 1742.6007 361.57462 1759.2096 354.74048 c
1775.8525 347.92297 1789.4323 337.29764 1800 322.8811 c
1757.3207 291.5871 l
h
W*
0 0 2480 550 rc
1480 415 m
1850 415 l
1850 35 l
1480 35 l
h
f
Q
q
1832.741 224.99168 m
1829.7795 210.94096 1829.2831 197.95445 1831.2688 186.0155 c
1833.2202 174.05992 1837.5681 163.61749 1844.2783 154.70485 c
1850.9885 145.79221 1859.7699 138.75853 1870.6055 133.63708 c
1881.424 128.53227 1894.2623 125.95493 1909.1034 125.95493 c
1923.9446 125.95493 1937.8613 128.53227 1950.8708 133.63708 c
1963.8462 138.75853 1975.589 145.79221 1986.0651 154.70485 c
1996.5411 163.61749 2005.2883 174.05992 2012.2896 186.0155 c
2019.2908 197.95445 2024.2892 210.94096 2027.2505 224.99168 c
2030.2119 239.02577 2030.6912 252.0123 2028.7397 263.96786 c
2026.7542 275.92346 2022.4233 286.36588 2015.7131 295.27853 c
2008.9858 304.17453 2000.2216 311.20822 1989.4031 316.32965 c
1978.5675 321.45111 1965.7291 324.01181 1950.8879 324.01181 c
1936.0469 324.01181 1922.1301 321.45111 1909.1377 316.32965 c
1896.1453 311.20822 1884.4025 304.17453 1873.9264 295.27853 c
1863.4503 286.36588 1854.7202 275.92346 1847.7019 263.96786 c
1840.6836 252.0123 1835.7023 239.02577 1832.741 224.99168 c
1783.5272 224.99168 m
1787.9265 245.84328 1795.6466 264.83252 1806.6705 281.89291 c
1817.6943 298.96994 1830.9607 313.66916 1846.4352 326.00717 c
1861.9268 338.32858 1879.387 347.92297 1898.7814 354.74048 c
1918.193 361.57462 1938.4434 365 1959.5325 365 c
1980.6216 365 1999.4341 361.57462 2015.9528 354.74048 c
2032.4714 347.92297 2045.8918 338.32858 2056.1968 326.00717 c
2066.4673 313.66916 2073.5029 298.96994 2077.3542 281.89291 c
2081.1545 264.83252 2080.8635 245.84328 2076.4641 224.99168 c
2072.0649 204.12346 2064.3447 185.15083 2053.3381 168.07382 c
2042.2971 151.01343 2029.0479 136.29758 2013.5563 123.97619 c
1998.0818 111.63816 1980.6216 102.06039 1961.2101 95.226257 c
1941.8156 88.408752 1921.5652 85 1900.4761 85 c
1879.387 85 1860.5574 88.408752 1844.0387 95.226257 c
1827.5029 102.06039 1814.1167 111.63816 1803.8119 123.97619 c
1793.5411 136.29758 1786.4716 151.01343 1782.6542 168.07382 c
1778.8369 185.15083 1779.145 204.12346 1783.5272 224.99168 c
W*
0 0 2480 550 rc
1730 415 m
2130 415 l
2130 35 l
1730 35 l
h
f
Q
q
2165.0439 421.74484 m
2166.8059 430.69354 2171.4661 438.46616 2178.9749 445.09674 c
2186.4673 451.69324 2194.7336 455 2203.741 455 c
2212.7649 455 2219.7302 451.69324 2224.6045 445.09674 c
2229.5115 438.46616 2231.0593 430.69354 2229.2974 421.74484 c
2227.3708 412.02908 2222.7766 404.03488 2215.5312 397.83041 c
2208.3022 391.60892 2199.97 388.48965 2190.584 388.48965 c
2181.1814 388.48965 2174.1006 391.60892 2169.3252 397.83041 c
2164.55 404.03488 2163.1174 412.02908 2165.0439 421.74484 c
2165.0439 421.74484 l
h
2154.0605 358.02991 m
2198.0105 358.02991 l
2143.9663 85 l
2100 85 l
2154.0605 358.02991 l
h
W*
0 0 2480 550 rc
2050 505 m
2280 505 l
2280 35 l
2050 35 l
h
f
Q
q
2251.7209 293.24884 m
2254.2036 305.69025 2256.1697 317.34769 2257.5859 328.23819 c
2259.0022 339.12866 2260.6184 349.04773 2262.4177 357.9953 c
2304.6052 357.9953 l
2303.1223 350.59863 2301.8228 343.21899 2300.7397 335.82233 c
2299.6233 328.42566 2298.3071 320.85855 2296.741 313.08691 c
2297.8906 313.08691 l
2302.2559 319.68259 2307.821 326.09076 2314.5857 332.31146 c
2321.3337 338.53217 2328.998 344.0882 2337.5789 348.94547 c
2346.1428 353.80273 2355.4902 357.70557 2365.5706 360.61993 c
2375.6675 363.5343 2386.231 365 2397.2444 365 c
2414.7393 365 2429.3015 362.2731 2440.9482 356.81934 c
2452.5947 351.36557 2461.6086 343.78143 2468.04 334.06689 c
2474.4548 324.35236 2478.2871 312.57562 2479.5034 298.78781 c
2480.7197 284.96591 2479.7034 269.89987 2476.4375 253.57265 c
2442.6643 85 l
2398.1941 85 l
2431.0344 248.90285 l
2435.6165 271.85983 2434.3 289.94247 2427.0688 303.16788 c
2419.821 316.35919 2405.7419 322.98892 2384.8481 322.98892 c
2370.4023 322.98892 2357.4397 320.44952 2345.9763 315.42181 c
2334.4963 310.34299 2324.4993 303.16788 2315.9851 293.82828 c
2307.4712 284.48871 2300.2898 273.41074 2294.4917 260.57733 c
2288.6934 247.74393 2284.2446 233.54709 2281.1289 217.98679 c
2254.4702 85 l
2210 85 l
2251.7209 293.24884 l
h
W*
0 0 2480 550 rc
2160 415 m
2530 415 l
2530 35 l
2160 35 l
h
f
Q
q
360.07489 371.37656 m
350.66797 382.99374 337.90384 391.50748 321.78256 396.90115 c
305.66125 402.31146 286.69403 405 264.8468 405 c
247.83934 405 231.701 391.37469 228.78691 374.56296 c
201.86128 218.90927 l
234.8537 218.90927 l
231.93959 202.06436 l
198.94717 202.06436 l
196.81699 189.66716 l
229.79236 189.66716 l
226.89529 172.82224 l
193.90289 172.82224 l
190.40938 152.67471 l
189.847 149.4053 189.86404 146.61719 190.46049 144.32693 c
191.05695 142.0367 192.72702 140.22774 195.48775 138.93324 c
198.23143 137.62216 202.20212 136.6264 207.39978 135.97916 c
212.56337 135.31532 219.6356 135 228.58241 135 c
271.61227 135 305.26932 146.28526 329.53647 168.87239 c
353.78656 191.45952 369.26028 222.04591 375.94055 260.68137 c
380.35431 286.20596 381.1723 308.12927 378.3775 326.45123 c
375.58267 344.77319 369.48181 359.75937 360.07489 371.37656 c
W*
0 0 2480 550 rc
140 455 m
430 455 l
430 85 l
140 85 l
h
f
Q
q
448.94788 275 m
445.63074 255.30086 439.04724 235.78789 429.21426 216.42723 c
419.38132 197.06656 406.26508 179.63521 389.8317 164.11621 c
373.41525 148.59721 353.71548 136.09064 330.74936 126.56261 c
307.76633 117.05152 281.65231 112.29597 252.39038 112.29597 c
151.30222 112.29597 l
142.73859 112.29597 132.75331 112.05904 121.34641 111.55134 c
109.90566 111.04362 99.040337 110.46822 88.733505 109.79128 c
88.29348 111.12824 88.225784 112.63445 88.513489 114.29297 c
88.784279 115.96841 89.021217 117.30538 89.19046 118.30387 c
89.799728 121.9763 90.781334 124.39639 92.135269 125.56413 c
93.472282 126.73186 94.995453 127.47649 96.704796 127.81496 c
106.52083 129.49042 114.54289 131.74126 120.77099 134.58443 c
126.99909 137.41068 130.70549 142.33546 131.89018 149.34186 c
136.35817 175.912 l
106.97778 175.912 l
109.87182 193.07259 l
139.2522 193.07259 l
141.38464 205.71455 l
112.00426 205.71455 l
114.8983 222.89206 l
144.27869 222.89206 l
174.13295 400.15042 l
175.26688 406.83527 173.67599 411.57391 169.37726 414.41708 c
165.09543 417.24332 157.36108 419.68033 146.19112 421.67731 c
143.66942 422.33734 142.21393 423.43738 141.82468 424.92667 c
141.40158 426.43286 141.43542 428.51447 141.87546 431.18842 c
142.04469 432.18692 142.26471 433.5239 142.55241 435.19931 c
142.84013 436.85785 143.43248 438.53329 144.38023 440.20874 c
151.18375 439.53177 157.27646 439.10867 162.65836 438.95636 c
167.97255 438.78714 172.86363 438.53329 177.36546 438.21173 c
182.34119 437.85632 187.33382 437.70401 192.39415 437.70401 c
205.61194 437.70401 l
305.71851 437.70401 l
333.66034 437.70401 357.5065 433.35464 377.25702 424.68973 c
396.99063 416.0079 412.78088 404.33057 424.6109 389.64084 c
436.44092 374.95111 444.39526 357.77359 448.474 338.07446 c
452.55273 318.37534 452.72198 297.35614 448.94788 275 c
270.00845 545 m
120.87254 545 0 424.11432 0 275 c
0 125.88567 120.87254 5 270.00845 5 c
419.12747 5 540 125.88567 540 275 c
540 424.11432 419.12747 545 270.00845 545 c
W*
0 0 2480 550 rc
-50 595 m
590 595 l
590 -45 l
-50 -45 l
h
f
ep
end
%%Trailer
%%EOF
